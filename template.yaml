AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  user-lambda

  Sample SAM Template for user-lambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.6
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
      Policies: 
        - SNSPublishMessagePolicy:
            TopicName:
              !GetAtt UserSNS.TopicName
  UserSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: UserSNS
      TopicName: UserSNSTopic

  UserSQS:
    Type: AWS::SQS::Queue
    Properties: 
          QueueName: UserQueue

  userQueueToSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt UserSQS.Arn
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref UserSNS

  queueInvokesLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: subscriber_lambda/
      Handler: app.lambda_handler
      Runtime: python3.6
      Environment:
        Variables: 
          MY_SQS_QUEUE_URL: !Ref UserSQS
      Events:
        SqsJobQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UserSQS.Arn
            BatchSize: 1

  userQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref UserSQS
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal: "*"
          Action: "sqs:*"
          Resource: "*"
          Condition:
            ArnEquals:
              "aws:SourceArn": !Ref UserSNS


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  UserSNS:
    Description: SNS Topic for User Events
    Value: !Ref UserSNS
